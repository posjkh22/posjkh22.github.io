---
layout: post
title: "C/C++ pointer basic"
subtitle: "Pointer basic"
categories: language
tags: c
comments: true
---

>C/C++ pointer basic

## Pointer variable

포인터는 메모리 주소(Memory address)를 나타내기 위해 사용하는 변수이다.<br><br>

여기서 언급하는 메모리 주소는 지역변수(Local variable)가 사용하는 Stack memroy space 의 주소 일수도 있고,
전역변수(Global variable)가 사용하는 Data segment 내의 주소 일 수도 있고, 
malloc을 통해 heap memeory space에 할당된 변수의 주소일 수도 있다.<br><br>

다시 말하면, 포인터 변수는 해당 변수(메모리상 어디에 존재하던지 간에)의 메모리 주소, 또는 직접 메모리 주소(0x20000010)와 같은 실제 메모리 번지)를 가지는 변수이다.

## 포인터와 배열

##### 포인터와 관련해 배열이 언급되는 가장 큰 이유는 배열과 포인터의 용법이 닮아 있는데, 차이가 존재하기 때문이다.<br><br>

>A. 포인터와 배열의 용법은 서로 닮아 있다.

```C
#include <stdio.h>
#include <stdlib.h>

char* p = (char*)malloc(sizeof(char) * 10);

for(int i = 0; i < 10; i++){ p[i] = i;}
for(int i = 0; i < 10; i++){ printf(" value: %d\n", p[i]); }
```

```C
#include <stdio.h>
#include <stdlib.h>

char arr[10]; 

for(int i = 0; i < 10; i++){ arr[i] = i;}
for(int i = 0; i < 10; i++){ printf(" value: %d\n", arr[i]); }
```

>B. 왜 둘의 결과는 동일한 것일까? 

1. [] 연산의 역할을 생각해보라.
2. 배열의 symbol은 해당 배열의 주소를 의미한다.


```c
p[i] == *(p+i)
arr[i] == *(arr+i)
```

즉, 배열의 symbol은 해당 배열의 주소를 가지고 있고 포인터도 마찬가지로 heap 영역에 할당된 주소를 가지고 있으므로 동일하게 동작하는 것이다.


>C. 무엇이 다를까?

포인터 변수에 담기는 주소는 바뀔 수 있다. 즉, 포인터 변수가 처음에 선언과 동시에 값이 결정되더라도 이 후에 변경될 수 있다는 것이다. 그러나, 배열의 경우는 다르다.
함수내에서 선언되는 배열(Stack memory space)이든 data segment space에 선언되는 배열이든 배열변수는 다른 주소를 받을 수 없다. 즉, 배열의 주소는 선언과 동시에 고정되어 있다.
조금만 더 생각해보면, 배열의 symbol은 포인터에 대입될 수 있지만 그 역은 불가능하다는 것을 알 수 있다.


















