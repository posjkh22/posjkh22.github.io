---
layout: post
title: "C/C++ pointer basic"
subtitle: "Pointer basic"
categories: language
tags: c
comments: true
---

>C/C++ pointer basic

## Pointer variable

포인터는 메모리 주소(Memory address)를 나타내기 위해 사용하는 변수이다.<br><br>

여기서 언급하는 메모리 주소는 지역변수(Local variable)가 사용하는 Stack memroy space 의 주소 일수도 있고,
전역변수(Global variable)가 사용하는 Data segment 내의 주소 일 수도 있고, 
malloc을 통해 heap memeory space에 할당된 변수의 주소일 수도 있다.<br><br>

다시 말하면, 포인터 변수는 해당 변수(메모리상 어디에 존재하던지 간에)의 메모리 주소, 또는 직접 메모리 주소(0x20000010)와 같은 실제 메모리 번지)를 가지는 변수이다.

## 포인터와 배열

포인터와 관련해 배열이 언급되는 가장 큰 이유는 배열과 포인터의 용법이 닮아 있는데, 차이가 존재하기 때문이다.

<br><br>

>A. 포인터와 배열의 용법은 서로 닮아 있다.

```C
#include <stdio.h>
#include <stdlib.h>

char* p = (char*)malloc(sizeof(char) * 10);

for(int i = 0; i < 10; i++){ p[i] = i;}
for(int i = 0; i < 10; i++){ printf(" value: %d\n", p[i]); }
```

```C
#include <stdio.h>
#include <stdlib.h>

char arr[10]; 

for(int i = 0; i < 10; i++){ arr[i] = i;}
for(int i = 0; i < 10; i++){ printf(" value: %d\n", arr[i]); }
```

<br><br>

>B. 왜 둘의 결과는 동일한 것일까? 

1. [] 연산의 역할을 생각해보라.
2. 배열의 symbol은 해당 배열의 주소를 의미한다.


```c
p[i] == *(p+i)
arr[i] == *(arr+i)
```

즉, 배열의 symbol은 해당 배열의 주소를 가지고 있고 포인터도 마찬가지로 heap 영역에 할당된 주소를 가지고 있으므로 동일하게 동작하는 것이다.

<br><br>

>C. 무엇이 다를까?

포인터 변수에 담기는 주소는 바뀔 수 있다. 즉, 포인터 변수가 처음에 선언과 동시에 값이 결정되더라도 이 후에 변경될 수 있다는 것이다. 그러나, 배열의 경우는 다르다.
함수내에서 선언되는 배열(Stack memory space)이든 data segment space에 선언되는 배열이든 배열변수는 다른 주소를 받을 수 없다. 즉, 배열의 주소는 선언과 동시에 고정되어 있다.
조금만 더 생각해보면, 배열의 symbol은 포인터에 대입될 수 있지만 그 역은 불가능하다는 것을 알 수 있다.

```c
char *p;
char arr[10];

p = arr;	// (o)
arr = p;	// (x)
```

## 포인터 연산

포인터 연산은 프로그래밍을 쉽게 해주는 도구이지만, 포인터에 대한 이해를 어렵게 만드는 부분이기도 하다. 여기서는 포인터에 대한 + 연산과 ++ 연산을 다루도록 한다.<br>

포인터 연산을 설명하기 앞서, 우선 알아야할 것이 있다. 포인터 형은 왜 필요한 것일까? 모든 포인터 변수는 4바이트 주소를 담는다. 즉, int 포인터형이든, char 포인터형이든 4바이트 주소를 담는다는 말이다.
무엇이 다를까? 포인터 형은 어디에서 사용될까? 그 정답은 포인터 변수가 가리키는 주소의 값을 참조( * 연산) 하거나, 본 주제에서 다루는 포인터에 대한 연산 즉, +, ++ 연산을 할 때 사용되는 것이다.

>포인터형은 포인터에 대한 연산을 할 때 사용된다.

아래의 예제를 살펴보자.

>A. 포인터 형에 따른 참조

포인터 참조는 포인터 형 크기만큼 참조한다. 즉, char 형은 해당 주소에서 1바이트 만큼 참조하고 int 형은 4바이트 만큼 참조한다.

```c
#include <stdio.h>

int main(){

	char data[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

	char* char_pointer = data;

	int* int_pointer = data;

	printf(" char pointer: %d\n", *char_pointer);
	printf(" int  pointer: %d\n", *int_pointer);

}
```

>B. 포인터 +, ++연산

포인터 연산 또한 포인터 형 크기를 사용한다. 포인터 변수가 아닌 일반 변수에서 ++ 연산은 형에 상관없이 해당 변수가 가지는 값을 1 증가시키는 것이다. 
그러나, 포인터 변수는 이와는 달리 포인터 형의 크기만큼 증가시킨다. 즉, char형 포인터 변수는 가지고 있는 주소값에 크기인 1만큼 증가시키고, int형 포인터 변수는 4만큼 증가시킨다.
이는 base라는 용어를 사용하여 설명이 가능한데, 비포인터 변수는 모두 증가시키는 base가 1로 모두 동일하지만, 포인터형 변수는 증가시키는 base가 각 포인터 형 크기만큼이다.<br>

이러한 사실은 ++연산 뿐만 아니라 +연산에서도 동일하게 적용된다. 예를들어 살펴보겠다. 

```c
int  a = a + 2;
char b = b + 3 ;
```

비포인터 변수인 int나 char 형은 base가 1이다., int a = a + 2; 를 base 개념을 이용하여 풀어보면 실제로는 a = a + 2 * 1; 이 된다. b = b + 3 * 1; 도 마찬가지이다.
즉, 모두 base 가 1이므로 c언어 표현과 완벽히 동일하다.

```c
int*  a = a + 2;
char* b = b + 3 ;
```

그러나, 포인터 변수의 경우에는 조금 다르다. base가 각 포인터 형에 따라 다르기 때문이다. int * a = a + 2; 의 경우, a = a + 2 * 4; 마찬가지로 char * b = b + 3; 의 경우 b = b + 3 * 1; 이 된다.


>B-1. ++ 포인터 연산

```c
#include <stdio.h>

int main(){

	char data[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

	char* char_pointer = data;

	int* int_pointer = data;

	printf(" char pointer: %d\n", *char_pointer);

	char_pointer++;
	printf(" char pointer: %d\n", *char_pointer);

	char_pointer++;
	printf(" char pointer: %d\n", *char_pointer);

	printf(" int pointer: %d\n", *int_pointer);

	int_pointer++;
	printf(" int pointer: %d\n", *int_pointer);

}
```

>B-2. + 포인터 연산

```c
#include <stdio.h>

int main(){

	char data[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

	char* char_pointer = data;

	int* int_pointer = data;

	printf(" char pointer: %d\n", *char_pointer);

	char_pointer = char_pointer + 2;
	printf(" char pointer: %d\n", *char_pointer);

	char_pointer = char_pointer + 1;
	printf(" char pointer: %d\n", *char_pointer);

	printf(" int pointer: %d\n", *int_pointer);

	int_pointer = int_pointer + 1;
	printf(" int pointer: %d\n", *int_pointer);

}
```

>B-3. ++ 포인터 연산과 * 연산 우선순위

```c
#include <stdio.h>

int main(){

	char data[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

	char* char_pointer = data;

	int* int_pointer = data;

	printf(" char pointer: %d\n", *char_pointer++);

	printf(" char pointer: %d\n", *char_pointer++);

	printf(" char pointer: %d\n", *char_pointer);

	printf(" int pointer: %d\n", *int_pointer++);

	printf(" int pointer: %d\n", *int_pointer);

}
```









